#!/bin/bash

# the fcma file with runtime settings read in by pni_fcma
# and this script too (for meta-settings)
fcmafile="/share/apps/fcma-toolbox/cluster/template.fcma"
(( $# < 1 )) && echo "usage: $(basename $0) params.fcma [pni_fcma_args] | example fcmafile at $fcmafile" && exit 1
[[ ! -f $1 ]] && echo "$1 not found" && exit 1
fcmafile=$1
shift
the_rest=$@
dryrun=0
#----------------
# hget()
# get fcma file setting
#----------------
function hget() {
  grep -w $1 $fcmafile | grep -v '#' | cut -d: -f2
}

dryrun=$(hget dryrun)
[[ -z $dryrun ]] && [[ $* =~ dryrun ]] && dryrun=1
[[ -n $dryrun ]] && (( dryrun == 0 )) && dryrun=""
# which binary to run
binary=$(hget binary)
[[ -z $binary ]] && binary=pni_fcma

# use xeon phi?
use_phi=$(hget use_phi)
[[ $use_phi == 1 ]] && use_phi=1 || use_phi=0
if (( use_phi )); then
  # setup /etc/profile.d on mics to set LD_LIBRARY_PATH and PATH
  echo "\"use_phi\" was set to 1; attempting to use Xeon Phi"
  binary_mic=$(hget binary_mic)
  [[ -z $binary_mic ]] && binary_mic=pni_fcma
  # max 240 OpenMP threads on mic
  # (60 cores, 4 virtual per physical)
  threads_max_mic=240
  threads_mic=$(hget omp_num_threads_mic)
  ( [[ x$threads_mic == x ]] || (( threads_mic > threads_max_mic )) ) && threads_mic=$threads_max_mic

  micenable="I_MPI_MIC=enable"
  threadline_mic="-env OMP_NUM_THREADS ${threads_mic}"
  #TODO: slurm srun phi
  printf  "Phi not supported yet, sorry.\n\tSet use_phi:0 in fcma file to continue\n"
  exit 1
  pmiline_mic="" 
else
  micenable=""
  threadline_mic=""
  pmiline_mic=""
fi

# number of OpenMP threads
# per node. max is 32 on metacortex
# (16 cores, 2 virtual per physical)
threads_max=32
threads=$(hget omp_num_threads)
( [[ x$threads == x ]] || (( threads > threads_max )) ) && threads=$threads_max
threadline="OMP_NUM_THREADS=${threads}"
pmiline="I_MPI_PMI_LIBRARY=/usr/lib64/libpmi.so"

# --------------------------
# main
# --------------------------

command="\
$micenable \
$threadline $pmiline \
srun $binary $fcmafile $the_rest"

if (( use_phi )); then

  command="$command \
: \
$threadline_mic $pmiline_mic \
${binary_mic} $fcmafile"

fi

[[ x$dryrun != x ]] && printf "\n\t**** DRY RUN, would run: ****\n\n"

containingdir=$(basename $(dirname $fcmafile))
[[ -z $containingdir ]] || [[ $containingdir == . ]] && containingdir=$(basename $PWD)
fr=$(basename $fcmafile)
fcmaroot=${fr%\.fcma}
jobname="${containingdir}_${fcmaroot}"
echo "job name set to $jobname"

tempfile=$(mktemp)

num_processors=$(hget num_processors)
[[ -z $num_processors ]] && num_processors=8

cat <<EOF > $tempfile
#!/bin/sh
#SBATCH -J $jobname
#SBATCH -p fcma
#SBATCH -t 1-00:00:00
#SBATCH -n $num_processors
#SBATCH -c $threads
$command
EOF
  
[[ x$dryrun != x ]] && echo "submitting this file:" && cat $tempfile && rm -f $tempfile && exit 

sbatch $tempfile

